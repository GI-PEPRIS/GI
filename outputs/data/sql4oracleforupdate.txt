drop index a_practice_index;
drop index a_risk_index;
drop index a_resource_index;
drop index a_resource_detail_index;
drop index a_parameter_index;
drop index a_practice_blobdata_index;
drop index a_correlation_index;
drop index a_npv_policy_index;
drop index a_npv_risk_index;
drop index a_npv_resource_index;
drop index a_npv_edp_basic_index;
drop index a_npv_edp_schedule_index;
drop index a_npv_cost_basic_index;
drop index a_npv_cost_detail_index;
drop index a_npv_price_index;
drop index a_npv_tax_index;
drop index a_npv_summary_index;
drop index a_npv_cost_mmbs_index;
drop index a_repository_genetic_index;
drop index a_repository_port_index;

alter table a_correlationt drop constraint fk_a_correlation_pid;
alter table a_npv_cost_basict drop constraint fk_a_npv_cost_basic_pid;
alter table a_npv_cost_detailt drop constraint fk_a_npv_cost_detail_pid;
alter table a_npv_cost_mmbst drop constraint fk_a_npv_cost_mmbs_pid;
alter table a_npv_edp_basict drop constraint fk_a_npv_edp_basic_pid;
alter table a_npv_edp_schedulet drop constraint fk_a_npv_edp_schedule_pid;
alter table a_npv_policyt drop constraint fk_a_npv_policy_pid;
alter table a_npv_pricet drop constraint fk_a_npv_price_pid;
alter table a_npv_resourcet drop constraint fk_a_npv_resource_pid;
alter table a_npv_riskt drop constraint fk_a_npv_risk_pid;
alter table a_npv_scenariot drop constraint fk_a_npv_scenario_pid;
alter table a_npv_summaryt drop constraint fk_a_npv_summary_pid;
alter table a_npv_taxt drop constraint fk_a_npv_tax_pid;
alter table a_parametert drop constraint fk_a_parameter_pid;
alter table a_practicet drop constraint fk_ap_elementid drop constraint fk_ap_activityid;
alter table a_practice_blobdatat drop constraint fk_a_practice_blobdata;
alter table a_repository_genetict drop constraint fk_a_repository_genetic_pid;
alter table a_repository_portt drop constraint fk_a_repository_port_pid;
alter table a_resourcet drop constraint fk_a_resource_pid;
alter table a_riskt drop constraint fk_a_risk_pid;

alter table d_contour_settingt drop constraint fk_contour_setting_classid;
alter table d_ipt_fault_geometryt drop constraint fk_fault_featureid;
alter table d_ipt_horizon_geometryt drop constraint fk_horizon_featureid;
alter table d_seismic_2dgt drop constraint fk_seismic_2dg_elementid drop constraint fk_seismic_2dg_classid drop constraint fk_seismic_2dg_jid;
alter table d_seismic_3dgt drop constraint fk_seismic_3dg_elementid drop constraint fk_seismic_3dg_classid drop constraint fk_seismic_3dg_jid;
alter table d_seismic_datasett drop constraint fk_seismic_dataset_jid;
alter table d_seismic_gatet drop constraint fk_seismic_gate_datasetid;
alter table d_seismic_headinfot drop constraint fk_seismic_headinfo_gateid;
alter table d_seismic_ipt_emt drop constraint fk_seismic_ipt_em_elementid drop constraint fk_seismic_ipt_em_jid;
alter table d_seismic_ipt_em_featuret drop constraint fk_seismic_ipt_em_feature_jid;
alter table d_seismic_profileinfot drop constraint fk_seismic_profileinfo_gateid;
alter table d_seismic_surveyinfot drop constraint fk_seismic_surveyinfo_gateid;
alter table d_seismic_tracedatat drop constraint fk_seismic_tracedata_gateid;
alter table d_well_basict drop constraint fk_well_basic_elementid drop constraint fk_well_basic_classid;
alter table d_well_boret drop constraint fk_well_bore_wellid;
alter table d_well_pickt drop constraint fk_well_pick_boreid;
alter table d_well_tracet drop constraint fk_well_trace_boreid;
alter table d_well_variablet drop constraint fk_well_variable_wellid;
alter table d_well_zonet drop constraint fk_well_zone_boreid;

alter table i_el_capt drop constraint fk_cap_elementid;
alter table i_el_explorationt drop constraint fk_exploration_elementid;
alter table i_el_factort drop constraint fk_factor_elementid drop constraint fk_factor_factorid;
alter table i_el_geologyt drop constraint fk_geology_elementid;
alter table i_el_geometryt drop constraint fk_elemenet_geometry_elementid drop constraint fk_elemenet_geometry_classid;
alter table i_el_horizont drop constraint fk_horizon_elementid;
alter table i_el_overallt drop constraint fk_overall_elementid;
alter table i_el_poolt drop constraint fk_pool_elementid;
alter table i_el_preservationt drop constraint fk_preservation_elementid;
alter table i_el_rastert drop constraint fk_elemenet_raster_elementid drop constraint fk_elemenet_raster_classid;
alter table i_el_reservoirt drop constraint fk_reservoir_elementid;
alter table i_el_sourcet drop constraint fk_source_elementid;
alter table i_el_segmentt drop constraint fk_segment_elementid;
alter table i_el_trapt drop constraint fk_trap_elementid;
alter table i_el_volume_samplet drop constraint fk_volume_sample_elementid;
alter table i_el_volume_statt drop constraint fk_volume_stat_elementid;

alter table r_fuzzy_membert drop constraint fk_fuzzy_member_factorid;
alter table r_fuzzy_standardt drop constraint fk_fuzzy_standard_templateid;
alter table r_gis_chartt drop constraint fk_gis_chart_classid;
alter table r_gis_layer_remarkt drop constraint fk_gis_layer_classid;
alter table r_gis_stylet drop constraint fk_gis_style_classid;
alter table r_kida_classt drop constraint fk_kida_class_categoryid drop constraint fk_kida_class_themeid;
alter table r_quick_rulet drop constraint fk_quick_rule_scoreid drop constraint fk_quick_rule_factorid;
alter table r_quick_standardt drop constraint fk_quick_standard_templateid;
alter table r_risk_factort drop constraint fk_risk_factor_templateid;


create table ref_sys_user
(
  userid INTEGER not null primary key,
  name VARCHAR2(64),
  department VARCHAR2(255),
  priority INTEGER,
  authorities CLOB,
  readvalidtables CLOB,
  writevalidtables CLOB,
  fieldid INTEGER not null
);
insert into ref_sys_user (userid, name, department, priority, authorities, readvalidtables, writevalidtables, fieldid) values(1, 'admin', '', 0, 'all', 'all', 'all', 1);
insert into ref_sys_user (userid, name, department, priority, authorities, readvalidtables, writevalidtables,fieldid) values(2, 'xzm', '', 0, 'all', 'all', 'all',1);
insert into ref_sys_user (userid, name, department, priority, authorities, readvalidtables, writevalidtables,fieldid) values(3, 'wyg', '', 0, 'all', 'all', 'all',1);
insert into ref_sys_user (userid, name, department, priority, authorities, readvalidtables, writevalidtables,fieldid) values(4, 'zh8', '', 0, 'all', 'all', 'all',1);
create table ref_key_generator
(
  keyid INTEGER not null primary key,
  nextid INTEGER,
  maxid INTEGER,
  name VARCHAR2(255),
  oilfieldid INTEGER
);
insert into ref_key_generator (keyid, nextid, maxid, name,oilfieldid) values(2, 2, 10, 'default',1);

create table ref_oilfields
(
  fieldid INTEGER,
  fieldname VARCHAR2(255)
);
insert into ref_oilfields values(1,'总部');
insert into ref_oilfields values(2,'东营');
insert into ref_oilfields values(3,'江汉');
create table ref_sql_topic
(
  topicid INTEGER not null primary key,
  topicname VARCHAR2(255),
  aliasname VARCHAR2(255),
  selectcolumns CLOB,
  fromtables CLOB,
  wherecondition CLOB,
  groupcolumns VARCHAR2(255),
  ordercolumns VARCHAR2(255)
);

create table r_resource_kind
(
  kindid INTEGER not null primary key,
  name VARCHAR2(255),
  remark VARCHAR2(255)
);

create table r_resource_class
(
  classid INTEGER not null primary key,
  category VARCHAR2(255),
  class VARCHAR2(255),
  remark VARCHAR2(255)  
);

create table r_probability
(
  probid INTEGER not null primary key,
  name VARCHAR2(50),
  paratype INTEGER,
  remark VARCHAR2(255)
);

create table r_pb_user
(
  probid INTEGER not null primary key,
  name VARCHAR2(50),
  minx float,
  maxx float,
  data BLOB,
  remark VARCHAR2(255)
);

create table r_quick_template
(
  templateid INTEGER not null primary key,
  name VARCHAR2(128),
  whodo VARCHAR2(64),
  whendo INTEGER,
  type INTEGER,
  remark VARCHAR2(255),
  formula VARCHAR2(255)
);

create table r_risk_factor
(
  factorid INTEGER not null primary key,
  parentid INTEGER,
  templateid INTEGER,
  scoretype INTEGER,
  name VARCHAR2(50),
  uppervalue float,
  lowervalue float,
  svalue VARCHAR2(255),
  weight float,
  iscommon CHAR(1),
  constraint fk_risk_factor_templateid foreign key (templateid) references r_quick_template(templateid)
);

create table r_quick_standard
(
  scoreid INTEGER not null primary key,
  templateid INTEGER,
  scoretype INTEGER,
  upperscore float,
  lowerscore float,
  remark VARCHAR2(255),
  constraint fk_quick_standard_templateid foreign key (templateid) references r_quick_template(templateid)
);

create table r_fuzzy_standard
(
  scoreid INTEGER not null primary key,
  templateid INTEGER,
  favorability VARCHAR2(64),
  upperscore float,
  lowerscore float,
  rightupper float,
  leftlower  float,
  remark     VARCHAR2(255),
  constraint fk_fuzzy_standard_templateid foreign key (templateid) references r_quick_template(templateid)
);

create table r_quick_rule
(
  scoreid INTEGER,
  factorid INTEGER,
  uppervalue float,
  lowervalue float,
  svalue VARCHAR2(255),
  favorability VARCHAR2(64),
  remarkdata CLOB,
  constraint fk_quick_rule_scoreid foreign key (scoreid) references r_quick_standard(scoreid),
  constraint fk_quick_rule_factorid foreign key (factorid) references r_risk_factor(factorid)
);

create table r_fuzzy_member
(
  memberid INTEGER,
  factorid INTEGER,
  valuetype INTEGER,
  membertype INTEGER,
  membername VARCHAR2(64),
  favorability VARCHAR2(64),
  leftlower float,
  lowervalue float,
  uppervalue float,
  rightupper float,
  svalue VARCHAR2(255),
  constraint fk_fuzzy_member_factorid foreign key (factorid) references r_risk_factor(factorid)
);

create table i_el
(
  elementid INTEGER not null primary key,
  parentid INTEGER,
  name VARCHAR2(50),
  type INTEGER,
  foundtime INTEGER,
  calibration INTEGER,
  weight float,
  resourcemin float,
  largemin float,
  largemax float,
  screening float
);

create table i_el_factor
(
  elementid INTEGER,
  whodo VARCHAR2(255),
  factorid INTEGER,
  fvalue float,
  svalue VARCHAR2(255),
  weight float,   
  quickscore float,
  fuzzyscore float,
  upperscore float,
  lowerscore float,
  role float,
  iscommon CHAR(1),
  iscondition CHAR(1),
  remark VARCHAR2(255),
  remarkdata BLOB,
  constraint fk_factor_elementid foreign key (elementid) references i_el(elementid),
  constraint fk_factor_factorid foreign key (factorid) references r_risk_factor(factorid)
);

create table i_el_overall
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  areaid INTEGER,
  areaparameter VARCHAR2(255),
  mappedid INTEGER,
  mappedparameter VARCHAR2(255),
  postulatedid INTEGER,
  postulatedparameter VARCHAR2(255),
  conditionalid INTEGER,
  conditionalparameter VARCHAR2(255),
  discoveredid INTEGER,
  discoveredparameter VARCHAR2(255),
  ytfid INTEGER,
  ytfparameter VARCHAR2(255),
  betaid INTEGER,
  betaparameter VARCHAR2(255),		  	
  constraint fk_overall_elementid foreign key (elementid) references i_el(elementid)
);

create table r_pgeo_basin_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_pgeo_play_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_pgeo_trap_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_pgeo_exploration_degree
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_pgeo_structural_belt
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_pgeo_tectonic_strength
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_pgeo_thermal_history
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_pgeo_geographic_environment
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_pgeo_formation_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table i_el_geology
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  basintypeid INTEGER,
  playtypeid INTEGER,
  environmentid INTEGER,
  formaitonid INTEGER,
  belttypeid INTEGER,
  explorationdegreeid INTEGER,
  thermalhistoryid INTEGER,
  tectonicstrengthid INTEGER,
  tectonicnumber INTEGER,
  drillfootage INTEGER,
  timetofound INTEGER,
  maxarea float,
  maxburydepth float,		  	
  rockmaxthickness float,
  rockavgthickness float,
  rockminthickness float,
  rockvolume float,
  rockmaxvelocity float,
  rockavgvelocity float,
  rockminvelocity float,
  rockmaxage float,	
  thermalsurface float,
  thermalgradient float,
  thermalhfu float,
	  	
  constraint fk_geology_elementid foreign key (elementid) references i_el(elementid)
);

create table r_ps_rock_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_ps_face_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_ps_organic_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_ps_pathway_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_ps_supplyway_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table i_el_source
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  horfromid INTEGER,
  hortoid INTEGER,
  srctypeid INTEGER,
  orgtypeid INTEGER,
  pathwayid INTEGER,
  supplywayid INTEGER,
  thermalgradient float,
  srcdensity float, 
  romax float,
  roavg float,
  romin float,
  sedcycle float,
  migdistance float, 
  genvelocity float,
  genmax float,
  genavg float,
  genmin float,
  gentime float,
  expultime float,
  expulmax float,
  expulavg float,
  expulmin float,
  remainedmax float,
  remainedavg float,
  remainedmin float,
  srcmaxthick float,
  srcavgthick float,
  srcminthick float,
  srcmaxarea float,
  srcavgarea float,
  srcminarea float,
  srcmaxcoff float,
  srcavgcoff float,
  srcmincoff float,
  sandmaxpercent float,
  sandavgpercent float,
  sandminpercent float,
  srcmaxpercent float,
  srcavgpercent float,
  srcminpercent float,
  constraint fk_source_elementid foreign key (elementid) references i_el(elementid)
);

create table r_prsv_rock_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_prsv_space_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_prsv_pore_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_prsv_diagenetic_phase
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table i_el_reservoir
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  horfromid INTEGER,
  hortoid INTEGER,
  reservortypeid INTEGER,
  poretypeid INTEGER,
  faceid INTEGER,
  avgthickness float,
  maxdepth float,
  avgdepth float,
  mindepth float,
  maxpore float,
  avgpore float,
  minpore float,
  maxperme float,
  avgperme float,
  minperme float,
  maxsand float,
  avgsand float,
  minsand float,
  maxthrout float,
  avgthrout float,
  minthrout float,
  constraint fk_reservoir_elementid foreign key (elementid) references i_el(elementid)
);

create table r_property_cap_rock_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table i_el_cap
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  horizonfromid INTEGER,
  horizontoid INTEGER,
  captypeid INTEGER,
  displacement float,
  maxpermiability float,
  avgpermiability float,
  minpermiability float,
  maxthickness float,
  avgthickness float,
  minthickness float,
  area float,
  areacoff float,
  maxdepth float,
  avgdepth float,
  mindepth float,	
  constraint fk_cap_elementid foreign key (elementid) references i_el(elementid)
);

create table r_ppsv_fault_strength
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_ppsv_water_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_ppsv_migration_relation
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_ppsv_migration_way
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_ppsv_composition_type
(
  id INTEGER not null primary key,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table i_el_preservation
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  faulttypeid INTEGER,
  faultnumber INTEGER,
  watertypeid INTEGER,
  migrationrelationid INTEGER,
  migrationwayid INTEGER,
  compositionid INTEGER, 
  maxerosionthick float,
  avgerosionthick float,
  minerosionthick float,
  maxerosionarea float,
  avgerosionarea float,
  minerosionarea float,
  waterppm float,
  compositionnumber float,
  accumulationperiod float,
  constraint fk_preservation_elementid foreign key (elementid) references i_el(elementid)
);

create table i_el_volume_sample
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  productarea float,
  grossthickness float,
  averageporosity float,
  averagehcsaturation float,
  rockdensity float,
  oildensity float,
  gascontent float,
  geometricfactor float,
  nettogrossratio float,
  formationvolumefactor float,
  recoveryfactor float,
  recyclefactor float,
  conversionfactor float,
  constraint fk_volume_sample_elementid foreign key (elementid) references i_el(elementid)
);

create table i_el_volume_stat
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  minproductarea float,
  modeproductarea float,
  maxproductarea float,
  mingrossthickness float,
  modegrossthickness float,
  maxgrossthickness float,
  minaverageporosity float,
  modeaverageporosity float,
  maxaverageporosity float,
  minaveragehcsaturation float,
  modeaveragehcsaturation float,
  maxaveragehcsaturation float,
  minrockdensity float,
  moderockdensity float,
  maxrockdensity float,
  minoildensity float,
  modeoildensity float,
  maxoildensity float,
  mingascontent float,
  modegascontent float,
  maxgascontent float,
  mingeometricfactor float,
  modegeometricfactor float,
  maxgeometricfactor float,
  minnettogrossratio float,
  modenettogrossratio float,
  maxnettogrossratio float,
  minformationvolumefactor float,
  modeformationvolumefactor float,
  maxformationvolumefactor float,
  minrecoveryfactor float,
  moderecoveryfactor float,
  maxrecoveryfactor float,
  minrecyclefactor float,
  moderecyclefactor float,
  maxrecyclefactor float,
  minconversionfactor float,  	
  modeconversionfactor float,  	
  maxconversionfactor float,  	
  constraint fk_volume_stat_elementid foreign key (elementid) references i_el(elementid)
);

create table i_el_exploration
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  groupname VARCHAR2(255),
  resourcename VARCHAR2(50),
  explorationdate INTEGER, 
  commercialwells float,
  commercialfootage float,
  wells float,
  evaluationwells float,
  evaluationfootage float,
  footage float,
  seismiclength float,
  seismicarea float,
  investment float,
  inplaceoil float,
  recoverableoil float,
  inplacegas float,
  recoverablegas float,
  constraint fk_exploration_elementid foreign key (elementid) references i_el(elementid)
);

create table i_el_segment
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  oilgasid INTEGER,
  oilgasparameter VARCHAR2(255),
  hcwaterid INTEGER,
  hcwaterparameter VARCHAR2(255),
  spilldepthid INTEGER,
  spilldepthparameter VARCHAR2(255),
  thickmultiplierid INTEGER,
  thickmultiplierparameter VARCHAR2(255),
  constraint fk_segment_elementid foreign key (elementid) references i_el(elementid)
);

create table i_el_trap_project
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  fromdate float,
  todate float,
  organization VARCHAR2(127),
  conductor VARCHAR2(64),
  auditor VARCHAR2(64),
  auditstatus VARCHAR2(64),
  trapstatus VARCHAR2(64),
  reliability VARCHAR2(64),
  remark VARCHAR2(255)
);

create table i_el_trap
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  projectid INTEGER,
  horizonfromid INTEGER,
  horizontoid INTEGER,
  traptypeid INTEGER,
  rangemaxheight float,
  rangeavgheight float,
  areaclosure float,
  areaoilclosure float,
  areagasclosure float,
  areamaxcoff float,
  areaavgcoff float,
  areamincoff float,
  formationtime float,
  knownarea float,
  predicationarea float,
  knownnumber float,
  predicationnumber float,
  reliability float,
  drillsuccess float,
  traptype VARCHAR2(32),
  seishorizon VARCHAR2(32),
  geohorizon VARCHAR2(32),
  constraint fk_trap_elementid foreign key (elementid) references i_el(elementid)
);

create table i_el_trap_exploration
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  statdate float,
  drillstatus VARCHAR2(64),
  drillresult VARCHAR2(64),
  drillevaluation VARCHAR2(64),
  drillconclusion VARCHAR2(64),
  drilldate float,
  discoveryid VARCHAR2(64),
  discoverydate float,
  drilled INTEGER,
  drilling INTEGER,
  footage float,
  tested INTEGER,
  testing INTEGER,
  successes INTEGER,
  oilresource float,
  gasresource float,
  remark VARCHAR2(255)
);

create table i_el_pool
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  groupname VARCHAR2(255),
  resourcename VARCHAR2(255),
  traptypeid INTEGER,
  appraisalwells INTEGER,
  industrywells INTEGER,
  drillwells INTEGER,		
  founddate INTEGER,
  areaheight float,
  areaclosure float,
  inplaceoil float,
  recoverableoil float,
  inplacegas float,
  recoverablegas float,
  constraint fk_pool_elementid foreign key (elementid) references i_el(elementid)
);

create table i_el_horizon
(
  propertyid INTEGER not null primary key,
  elementid INTEGER,
  horizonname VARCHAR2(127),
  remark VARCHAR2(255),
  constraint fk_horizon_elementid foreign key (elementid) references i_el(elementid)
);

create table r_activity
(
  activityid INTEGER not null primary key,
  parentid INTEGER,
  type INTEGER,
  name VARCHAR2(50),
  remark VARCHAR2(255)
);

create table a_practice
(
  practiceid INTEGER not null primary key,
  elementid INTEGER,
  activityid INTEGER,
  whendo float,
  whodo VARCHAR2(64),
  approved CHAR(1),
  templateidx INTEGER,
  npv float,
  groupname VARCHAR2(255),
  distribution VARCHAR2(255),
  parameter VARCHAR2(255),
  remark VARCHAR2(255),
  constraint fk_ap_elementid foreign key (elementid) references i_el(elementid),
  constraint fk_ap_activityid foreign key (activityid) references r_activity(activityid)
);

create table a_risk
(
  practiceid INTEGER,
  elementid INTEGER,
  factorid INTEGER,
  maturity float,
  minrisk float,
  avgrisk float,
  maxrisk float,
  constraint fk_a_risk_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_resource
(
  practiceid INTEGER,
  elementid INTEGER,
  kindname VARCHAR2(32),
  categoryname VARCHAR2(32),
  classname VARCHAR2(32),
  groupname VARCHAR2(255),
  minn INTEGER,
  avgn INTEGER,
  maxn INTEGER,
  minpool float,
  avgpool float,
  maxpool float,
  meanq float,
  stdq float,
  minq float,
  avgq float,
  maxq float,
  constraint fk_a_resource_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_parameter
(
  practiceid INTEGER,
  elementid INTEGER,
  probname VARCHAR2(255),
  probpara VARCHAR2(255),
  fractiles INTEGER,
  parameter CLOB,
  constraint fk_a_parameter_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_correlation
(
  practiceid INTEGER,
  elementid INTEGER,
  firstid INTEGER,
  secondid INTEGER,
  correlation float,
  constraint fk_a_correlation_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_npv_policy
(
  practiceid INTEGER,
  elementid INTEGER,
  calculationtype INTEGER,
  rounds INTEGER,
  startdate INTEGER,
  npvdate INTEGER,
  irr float,
  pi float,
  discountrate float,
  inflation float,
  productionpolicy int,
  gasdisposal int,
  screenreserve float,
  oilcommodity float,
  gascommodity float,
  vat float,
  oil2gas float,
  gas2oil float,
  scenariomode INTEGER,
  scenarioitrnum INTEGER,
  userseedmode INTEGER,
  userseednum INTEGER,
  data BLOB,
  constraint fk_a_npv_policy_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_npv_scenario
(
  practiceid INTEGER,
  elementid INTEGER,
  data BLOB,
  dataresult BLOB,
  constraint fk_a_npv_scenario_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_npv_risk
(
  practiceid INTEGER,
  elementid INTEGER,
  marginal float,
  conditional float,
  unconditional float,
  dryholerisk float, 
  constraint fk_a_npv_risk_pid foreign key (practiceid) references a_practice(practiceid)
);


create table a_npv_resource
(
  practiceid INTEGER,
  elementid INTEGER,
  resourceid INTEGER,
  reserve float,
  oilpracticeid INTEGER,
  gaspracticeid INTEGER,
  oilactivitytype INTEGER,
  gasactivitytype INTEGER,
  gasreserve float,
  constraint fk_a_npv_resource_pid foreign key (practiceid) references a_practice(practiceid)
);


create table a_npv_edp_basic
(
  practiceid INTEGER,
  elementid INTEGER,
  expprevduration INTEGER,
  expprevwellnumber INTEGER,
  expduration INTEGER,
  expwellnumber INTEGER,
  expappduration INTEGER,
  expappwellnumber INTEGER,
  devappduration INTEGER,
  devappwellnumber INTEGER,
  devduration INTEGER,
  devwellnumber INTEGER,
  prodbuildup INTEGER,
  prodplateau INTEGER,
  proddecline INTEGER,
  proddisposal INTEGER,
  prodwellnumber INTEGER,
  prodinjectionnumber INTEGER,
  plateauproduceratio float,
  declinetype INTEGER,
  declinerate float,
  declineindex float,
  declineformula VARCHAR2(255),
  constraint fk_a_npv_edp_basic_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_npv_edp_schedule
(
  practiceid INTEGER,
  elementid INTEGER,
  resourceid INTEGER,
  whendo INTEGER,
  reserve float,
  drillingnumber INTEGER,
  injectionnumber INTEGER,
  constraint fk_a_npv_edp_schedule_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_npv_cost_basic
(
  practiceid INTEGER,
  elementid INTEGER,
  calmethod INTEGER,
  data BLOB,
  constraint fk_a_npv_cost_basic_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_npv_cost_detail
(
  practiceid INTEGER,
  elementid INTEGER,
  resourceid INTEGER,
  data BLOB,
  constraint fk_a_npv_cost_detail_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_npv_cost_mmbs
(
  practiceid INTEGER,
  elementid INTEGER,
  resourceid INTEGER,
  deprimethod INTEGER,
  depriyear INTEGER,
  calmethod INTEGER,
  data BLOB,
  constraint fk_a_npv_cost_mmbs_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_npv_price
(
  practiceid INTEGER,
  elementid INTEGER,
  resourceid INTEGER,
  whendo INTEGER,
  price float,
  inflation float,
  constraint fk_a_npv_price_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_npv_tax
(
  practiceid INTEGER,
  elementid INTEGER,
  resourceid INTEGER,
  whendo INTEGER,
  incometax float,
  revenueoiltax float,
  revenuegastax float,  
  data BLOB,
  constraint fk_a_npv_tax_pid foreign key (practiceid) references a_practice(practiceid)
);


create table a_npv_summary
(
  practiceid INTEGER,
  elementid INTEGER,
  discountrate float,
  npv float,
  irr float,
  npvtax float,
  irrtax float,
  pc float,
  pe float,
  gaspc float,
  gaspe float,
  pcres float,
  peres float,
  emv float,
  emvtax float,
  gaspcres float,
  gasperes float,
  wellexp float,
  expcost float,
  devcost float,
  avgoperation float,
  procapacity VARCHAR2(255),
  price VARCHAR2(255),
  constraint fk_a_npv_summary_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_repository_genetic
(
  practiceid INTEGER,
  constraint fk_a_repository_genetic_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_repository_port
(
  practiceid INTEGER,
  elementid INTEGER,
  expinvestment float,
  devinvestment float,
  mresource float,
  npv float,
  georisk float,
  ecorisk float,
  engrisk float,
  minweight float,
  rtweight float,
  maxweight float,
  constraint fk_a_repository_port_pid foreign key (practiceid) references a_practice(practiceid)
);

create table a_bayes_net_node
(
  bayesnetworkid INTEGER,
  whodo VARCHAR2(255),
  whendo INTEGER,
  remark VARCHAR2(64),
  id INTEGER,					
  name VARCHAR2(255),
  states VARCHAR2(255),
  priors VARCHAR2(255),
  posteriors VARCHAR2(255),
  parents INTEGER,
  settings VARCHAR2(255),
  descs VARCHAR2(255),
  stateId INTEGER,
  ishidden CHAR(1),
  isevidence CHAR(1),
  iswarning CHAR(1),
  m_x float,
  m_y float
);

create table a_bayes_net_branch
(
  bayesnetworkid INTEGER,
  whodo VARCHAR2(255),
  whendo INTEGER,
  nodeidfrom INTEGER,
  nodeidto INTEGER,
  ishidden CHAR(1)
);


create table a_decision_tree_node
(
  decisiontreeid INTEGER,
  whodo VARCHAR2(255),
  whendo INTEGER,
  remark VARCHAR2(64),
  nodeid INTEGER,
  type INTEGER,
  decisionvalue float,
  nodeValue float,
  parentid INTEGER,
  leftnode INTEGER,
  rightnode INTEGER,
  issolved CHAR(1),
  isgreen CHAR(1),
  isvisible CHAR(1),
  m_x float,
  m_y float,
  curlevel INTEGER
);

create table a_decision_tree_branch
(
  decisiontreeid INTEGER,
  whodo VARCHAR2(255),
  whendo INTEGER,
  remark VARCHAR2(64),
  type INTEGER,
  description VARCHAR2(255),
  nodevalue float,
  fromnodeid INTEGER,
  tonodeid INTEGER,
  x1 float,
  y1 float,
  x2 float,
  y2 float,
  x3 float,
  y3 float,
  isgreen CHAR(1),
  isvisible CHAR(1)
);

create table a_pb_tree_node
(
  probabilitytreeid INTEGER,	
  whodo VARCHAR2(255),
  whendo INTEGER,
  remark VARCHAR2(64),
  nodeid INTEGER,
  description VARCHAR2(255),
  nodevalue float,
  parentid INTEGER,
  leftnode INTEGER,
  rightnode INTEGER,
  issolved CHAR(1),
  isgreen CHAR(1),
  nodelevel INTEGER,
  m_x float,
  m_y float,
  curlevel INTEGER,
  x_step float,
  y_step float,
  m_names VARCHAR2(255)
);

create table a_pb_tree_branch
(
  probabilitytreeid INTEGER,
  whodo VARCHAR2(255),
  whendo INTEGER,
  remark VARCHAR2(64),
  description VARCHAR2(255),
  nodevalue float,
  fromnodeid INTEGER,
  tonodeid INTEGER,
  x1 float,
  y1 float,
  x2 float,
  y2 float,
  isgreen CHAR(1)
);

create table r_activity_template
(
  username VARCHAR2(255),
  templateIdx INTEGER,
  templatename VARCHAR2(255),
  activityIdx INTEGER,
  parentIdx INTEGER,
  type INTEGER,
  name VARCHAR2(50),
  remark VARCHAR2(255),
  indexvalue INTEGER,
  isshown VARCHAR2(255),
  unitfor INTEGER,
  iscurrenttemplate INTEGER,
  isvalid VARCHAR2(255)
);

create table r_report_grid_template
(
  username VARCHAR2(255),
  templateIdx INTEGER,
  templatename VARCHAR2(255),
  datatype VARCHAR2(255),
  tablename VARCHAR2(255),
  fieldname VARCHAR2(255)
);

create table r_rh_template
(
  username VARCHAR2(255),
  templateIdx INTEGER,
  templatename VARCHAR2(255),
  mrow INTEGER,
  col INTEGER,
  rowsize INTEGER,
  colsize INTEGER,
  stringvalue VARCHAR2(255),
  tablename VARCHAR2(255),
  fieldname VARCHAR2(255),
  isorderby INTEGER,
  isunion INTEGER,
  orderbyprior INTEGER
);

create table r_rh_dimcol_template
(
  username VARCHAR2(255),
  templateIdx INTEGER,
  templatename VARCHAR2(255),
  col INTEGER,
  dimlevel INTEGER,
  parentidtablename VARCHAR2(255),
  parentidfieldname VARCHAR2(255),
  idtablename VARCHAR2(255),
  idfieldname VARCHAR2(255),
  identifytablename VARCHAR2(255),
  identifyfieldname VARCHAR2(255),
  contenttablename VARCHAR2(255),
  contentfieldname VARCHAR2(255),
  isorderby INTEGER,
  isunion INTEGER,
  orderbyprior INTEGER
);

create table r_rh_where_condition_template
(
  username VARCHAR2(255),
  templateIdx INTEGER,
  templatename VARCHAR2(255),
  lefttablename VARCHAR2(255),
  leftfieldname VARCHAR2(255),
  righttablename VARCHAR2(255),
  rightfieldname VARCHAR2(255)
);

create table r_report_grid
(
  formatname VARCHAR2(127),
  posx INTEGER,
  posy INTEGER,
  type INTEGER,
  sizex INTEGER,
  sizey INTEGER,
  rowsize INTEGER,
  colsize INTEGER,
  totalheight INTEGER,
  totalwidth INTEGER,
  blobdata BLOB
);

create table i_el_evaluation
(
  elementid INTEGER,
  whodo VARCHAR2(255),
  mresource float,
  resource10 float,
  resource90 float,
  resource00 float,
  ppolitic float,
  pmaturity float,
  pengineering float,
  irr float,
  npv float,
  emv float,
  strategy float,
  istrapcandidate INTEGER,
  iswellcandidate INTEGER,
  trapr float,
  wellr float,
  traprank INTEGER,
  wellrank INTEGER,
  oilfieldname VARCHAR2(255),
  resourcename VARCHAR2(32),
  recovery float,
  pshare float,
  pbusiness float,
  peconomic float,
  economic float,
  npv10 float,
  npv90 float,
  npv00 float,
  explrinvest float,
  devlpinvest float,
  riskid INTEGER,
  resourceid INTEGER,
  economicid INTEGER,
  selectionid INTEGER
);

create table a_resource_detail
(
  practiceid INTEGER,
  elementid INTEGER,
  activityid INTEGER,
  type VARCHAR2(255),
  geologicalsamples BLOB,
  recoverysamples BLOB
);

create table ref_database_version
(
  dbversion VARCHAR2(255)
);
create view i_el_evaluation_view as select i_el.elementid, whodo, parentid, name, type, foundtime, calibration, weight, resourcemin, largemin, largemax, screening, resourcename, mresource, resource10, resource90, resource00, ppolitic, recovery, pmaturity, pshare, pbusiness, peconomic, pengineering, irr, npv, emv, economic, strategy, istrapcandidate, iswellcandidate, trapr, wellr, traprank, wellrank, oilfieldname, npv10, npv90, npv00, explrinvest, devlpinvest, riskid, resourceid, economicid, selectionid from i_el, i_el_evaluation where i_el.elementid=i_el_evaluation.elementid;

create table r_kida_category
(
  categoryid INTEGER not null primary key,
  type INTEGER,
  name VARCHAR2(127),
  categoryorder INTEGER,
  remark VARCHAR2(255)
);

create table r_kida_theme
(
  themeid INTEGER not null primary key,
  type INTEGER,
  name VARCHAR2(127),
  remark VARCHAR2(255)
);

create table r_kida_class
(
  classid INTEGER not null primary key,
  categoryid INTEGER,
  themeid INTEGER,
  type INTEGER,
  name VARCHAR2(127),
  parentname VARCHAR2(127),
  source VARCHAR2(255),
  minx float,
  miny float,
  maxx float,
  maxy float,
  layerorder INTEGER,
  isshown INTEGER,
  canselect INTEGER,
  remark VARCHAR2(255),
  constraint fk_kida_class_categoryid foreign key (categoryid) references r_kida_category(categoryid),
  constraint fk_kida_class_themeid foreign key (themeid) references r_kida_theme(themeid)	
);

create table r_kida_dataset
(
  gateid INTEGER not null primary key,
  layerid INTEGER,
  tileid INTEGER,
  xlayercount INTEGER,
  ylayercount INTEGER,
  layershift INTEGER,
  xtilecount INTEGER,
  ytilecount INTEGER,
  minx float,
  miny float,
  maxx float,
  maxy float,
  remark VARCHAR2(255)
);

create table d_well_basic
(
  wellid INTEGER not null primary key,
  elementid INTEGER,
  classid INTEGER,
  geometryid INTEGER,
  adminid INTEGER,
  name VARCHAR2(255),
  INTEGERitude float,
  latitude float,
  xcoord float,
  ycoord float,
  groundevaluation float,
  totaldepth float,
  wellnumber VARCHAR2(128),
  wellstatus VARCHAR2(128),
  welltype VARCHAR2(128),
  nullvalue float,
  constraint fk_well_basic_elementid foreign key (elementid) references i_el(elementid),
  constraint fk_well_basic_classid foreign key (classid) references r_kida_class(classid)
);

create table d_well_geometry
(
  geometryid INTEGER not null primary key,
  layerid INTEGER,
  xmin float,
  xmax float,
  ymin float,
  ymax float,
  coords BLOB 
);

create table d_well_bore
(
  boreid INTEGER not null primary key,
  wellid INTEGER,
  name VARCHAR2(128),
  constraint fk_well_bore_wellid foreign key (wellid) references d_well_basic(wellid)  
);

create table d_well_trace
(
  boreid INTEGER,
  path BLOB,
  log BLOB,
  synthetic BLOB,
  timedepth BLOB,
  welladjust BLOB,
  constraint fk_well_trace_boreid foreign key (boreid) references d_well_bore(boreid)	
);

create table d_well_pick
(
  boreid INTEGER,
  pickby VARCHAR2(128),
  dipangle float,
  dipazimuth float,
  md float,
  tvd float,
  tvdss float,	
  faultheave float,
  faultname VARCHAR2(128),
  faulttype VARCHAR2(128),
  pickname VARCHAR2(128),
  constraint fk_well_pick_boreid foreign key (boreid) references d_well_bore(boreid)	
);

create table d_well_zone
(
  boreid INTEGER,
  wellzone VARCHAR2(128),
  constraint fk_well_zone_boreid foreign key (boreid) references d_well_bore(boreid)	
);

create table d_well_variable
(
  wellid INTEGER,
  name VARCHAR2(255),
  ishc INTEGER,
  xcoord float,
  ycoord float,
  grossthickness float,
  netthickness float,
  porosity float,
  saturation float,
  netgross float,
  capthickness float,
  estimateduplift float,
  presuregradient float,
  salinitygradient float,
  structure float,
  structureresiduals float,
  md float,
  risk float,
  mresource float,
  predication float,
  constraint fk_well_variable_wellid foreign key (wellid) references d_well_basic(wellid)	
);

create table d_seismic_project
(
  projectid INTEGER not null primary key,
  coordinatesystemtype VARCHAR2(255),
  depthcoordinatesystem VARCHAR2(255),
  name VARCHAR2(255),
  description VARCHAR2(255),
  xmin float,
  xmax float,
  ymin float,
  ymax float,
  interpreters VARCHAR2(255),
  remark VARCHAR2(127)
);

create table d_seismic_2dg
(
  geometryid INTEGER not null primary key,
  elementid INTEGER,
  classid INTEGER,
  projectid INTEGER,
  xmin float,
  xmax float,
  ymin float,
  ymax float,
  coords BLOB,
  remark VARCHAR2(255),
  constraint fk_seismic_2dg_elementid foreign key (elementid) references i_el(elementid),
  constraint fk_seismic_2dg_classid foreign key (classid) references r_kida_class(classid),
  constraint fk_seismic_2dg_jid foreign key (projectid) references d_seismic_project(projectid)
);


create table d_seismic_3dg
(
  geometryid INTEGER not null primary key,
  elementid INTEGER,
  classid INTEGER,
  projectid INTEGER,
  xmin float,
  xmax float,
  ymin float,
  ymax float,
  coords BLOB,
  remark VARCHAR2(255),
  constraint fk_seismic_3dg_elementid foreign key (elementid) references i_el(elementid),
  constraint fk_seismic_3dg_classid foreign key (classid) references r_kida_class(classid),
  constraint fk_seismic_3dg_jid foreign key (projectid) references d_seismic_project(projectid)
);

create table d_seismic_dataset
(
  datasetid INTEGER not null primary key,
  fromid INTEGER,
  projectid INTEGER,
  geometryid INTEGER,
  name VARCHAR2(255),
  mcomment VARCHAR2(255),
  datasource VARCHAR2(255),
  compressionfactor float,
  deltaz float,
  domaintype VARCHAR2(255),
  xmin float,
  xmax float,
  ymin float,
  ymax float,
  thetimestamp float,
  maxz float,
  minz float,
  numtraces INTEGER,
  samplekind VARCHAR2(255),
  samplemax float,
  samplemin float,
  sampleunit VARCHAR2(255),
  constraint fk_seismic_dataset_jid foreign key (projectid) references d_seismic_project(projectid)
);

create table i_el_geometry
(
  geometryid INTEGER not null primary key,
  elementid INTEGER,
  classid INTEGER,
  xmin float,
  xmax float,
  ymin float,
  ymax float,
  coords BLOB,
  constraint fk_elemenet_geometry_elementid foreign key (elementid) references i_el(elementid),
  constraint fk_elemenet_geometry_classid foreign key (classid) references r_kida_class(classid)
);

create table i_el_raster
(
  rasterid INTEGER not null primary key,
  elementid INTEGER,
  classid INTEGER,
  stamptime float,
  xmin float,
  xmax float,
  ymin float,
  ymax float,
  data BLOB,
  imgwidth INTEGER,
  imgheight INTEGER,
  imgfilelength INTEGER,
  constraint fk_elemenet_raster_elementid foreign key (elementid) references i_el(elementid),
  constraint fk_elemenet_raster_classid foreign key (classid) references r_kida_class(classid)
);

create table d_seismic_gate
(
  gateid INTEGER not null primary key,
  datasetid INTEGER,
  filepath VARCHAR2(255),
  constraint fk_seismic_gate_datasetid foreign key (datasetid) references d_seismic_dataset(datasetid)
);

create table d_seismic_surveyinfo
(
  gateid INTEGER,
  nLineNum INTEGER,
  nCDPNum INTEGER,
  nStartLine INTEGER,
  nStartCDP INTEGER,
  nLineIncrement INTEGER,
  nCDPIncrement INTEGER,
  fOrientation float,
  fDirection float,
  fOrgX float,
  fOrgY float,
  fLineSpace float,
  fCDPSpace float,
  crdType INTEGER,
  xmin float,
  xmax float,
  ymin float,
  ymax float,
  pos1x float,
  pos1y float,
  pos2x float,
  pos2y float,
  pos3x float,
  pos3y float,
  pos4x float,
  pos4y float,
  constraint fk_seismic_surveyinfo_gateid foreign key (gateid) references d_seismic_gate(gateid)
);

create table d_seismic_headinfo
(
  gateid INTEGER,
  nTraceNum INTEGER,
  nTraceLen INTEGER,
  nType INTEGER,
  nTracePt INTEGER,
  nInterval INTEGER,
  lineNumber INTEGER,
  reelNumber INTEGER,
  constraint fk_seismic_headinfo_gateid foreign key (gateid) references d_seismic_gate(gateid)
);

create table d_seismic_profileinfo
(
  gateid INTEGER,
  defaultStart INTEGER,
  defaultEnd INTEGER,
  userStart INTEGER,
  userEnd INTEGER,
  constraint fk_seismic_profileinfo_gateid foreign key (gateid) references d_seismic_gate(gateid)
);

create table d_seismic_tracedata
(
  gateid INTEGER,
  nOrder INTEGER,
  nPts INTEGER,
  nInterval INTEGER,
  nLineNo INTEGER,
  nCDPNo INTEGER,
  nSourceCrdX INTEGER,
  nSourceCrdY INTEGER,
  nCrdType INTEGER,
  nStartTime INTEGER,
  nEndTime INTEGER,
  hcode INTEGER,
  coordx float,
  coordy float,
  coordz float,
  coordw float,
  recordorder INTEGER,
  minA float,
  maxA float,
  samplenumber INTEGER,
  samples BLOB,
  times BLOB,
  constraint fk_seismic_tracedata_gateid foreign key (gateid) references d_seismic_gate(gateid)
);

create table d_seismic_ipt_em
(
  primaryid INTEGER not null primary key,
  modelid INTEGER,
  projectid INTEGER,
  elementid INTEGER,
  name VARCHAR2(255),
  remark VARCHAR2(255),
  constraint fk_seismic_ipt_em_jid foreign key (projectid) references d_seismic_project(projectid),
  constraint fk_seismic_ipt_em_elementid foreign key (elementid) references i_el(elementid)
);

create table d_seismic_ipt_em_feature
(
  featureid INTEGER not null primary key,
  projectid INTEGER,
  featurekind INTEGER,
  featuretype INTEGER,
  name VARCHAR2(255),
  isshown INTEGER,
  remark VARCHAR2(255),
  coords BLOB,
  constraint fk_seismic_ipt_em_feature_jid foreign key (projectid) references d_seismic_project(projectid)
);

create table d_ipt_fault_feature
(
  featureid INTEGER not null primary key,
  projectid INTEGER,
  surveyid INTEGER,
  name VARCHAR2(255),
  lastmodifieddate float,
  shapetype INTEGER,
  propertytype INTEGER,
  maxvalue float,
  minvalue float,
  nullvalue float
);

create table d_ipt_fault_geometry
(
  geometryid INTEGER not null primary key,
  featureid INTEGER,
  minx float,
  maxx float,
  miny float,
  maxy float,
  coords BLOB,
  constraint fk_fault_featureid foreign key (featureid) references d_ipt_fault_feature(featureid)
);

create table d_ipt_horizon_feature
(
  featureid INTEGER not null primary key,
  projectid INTEGER,
  surveyid INTEGER,
  name VARCHAR2(255),
  lastmodifieddate float,
  shapetype INTEGER,
  propertytype INTEGER,
  maxvalue float,
  minvalue float,
  nullvalue float,
  strataid INTEGER,
  strataname VARCHAR2(127),
  classification VARCHAR2(127),
  geologicage float
);

create table d_ipt_horizon_geometry
(
  geometryid INTEGER not null primary key,
  featureid INTEGER,
  minx float,
  maxx float,
  miny float,
  maxy float,
  numrows INTEGER,
  numcols INTEGER,
  tracedelta INTEGER,
  traceend INTEGER,
  tracestart INTEGER,
  coords BLOB,
  constraint fk_horizon_featureid foreign key (featureid) references d_ipt_horizon_feature(featureid)
);

create table r_gis_style
(
  classid INTEGER,
  isselectstyle INTEGER,
  styleType INTEGER,
  width float,
  patternlength INTEGER,
  pattern float,
  color_red INTEGER,
  color_green INTEGER,
  color_blue INTEGER,
  color_alpha INTEGER,
  gradient_type INTEGER,
  gradient_firstx float,
  gradient_lastx float,
  gradient_begin_red INTEGER,
  gradient_begin_green INTEGER,
  gradient_begin_blue INTEGER,
  gradient_begin_alpha INTEGER,
  gradient_middle_red INTEGER,
  gradient_middle_green INTEGER,
  gradient_middle_blue INTEGER,
  gradient_middle_alpha INTEGER,
  gradient_end_red INTEGER,
  gradient_end_green INTEGER,
  gradient_end_blue INTEGER,
  gradient_end_alpha INTEGER,
  arrow_first float,
  arrow_second float,
  arrow_thrid float,
  arrow_fourth float,
  linecap INTEGER,
  linejoin INTEGER,
  linejoinmaxsize float,
  fldName VARCHAR2(255),
  fldIdx INTEGER,
  labelfont VARCHAR2(255),
  labelsize float,
  rotation float,
  outlinewidth float,
  outlinecolor_red INTEGER,
  outlinecolor_green INTEGER,
  outlinecolor_blue INTEGER,
  outlinecolor_alpha INTEGER,
  backgroundcolor_red INTEGER,
  backgroundcolor_green INTEGER,
  backgroundcolor_blue INTEGER,
  backgroundcolor_alpha INTEGER,
  scale float,
  gap float,
  radius float,
  constraint fk_gis_style_classid foreign key (classid) references r_kida_class(classid)
);

create table r_gis_layer_remark
(
  classid INTEGER,
  description CLOB,
  remark CLOB,
  constraint fk_gis_layer_classid foreign key (classid) references r_kida_class(classid)
);

create table r_gis_chart
(
  classid INTEGER,
  colorred INTEGER,
  colorgreen INTEGER,
  colorblue INTEGER,
  chartheight float,
  chartwidth float,
  fieldtoshow INTEGER,
  fieldnametoshow VARCHAR2(255),
  constraint fk_gis_chart_classid foreign key (classid) references r_kida_class(classid)
);

create table a_practice_blobdata
(
  blobid INTEGER,
  practiceid INTEGER,
  parentpracticeid INTEGER,
  blobtype INTEGER,
  blobpos INTEGER,
  blobexplanation VARCHAR2(100),
  blobdata BLOB,
  constraint fk_a_practice_blobdata foreign key (practiceid) references a_practice(practiceid)
);

create table d_contour_setting
(
  classid INTEGER,
  setting BLOB,
  coords BLOB,
  constraint fk_contour_setting_classid foreign key (classid) references r_kida_class(classid)
);

create index a_practice_index on a_practice(elementid);
create index a_risk_index on a_risk(practiceid);
create index a_resource_index on a_resource(practiceid);
create index a_resource_detail_index on a_resource_detail(practiceid);
create index a_parameter_index on a_parameter(practiceid);
create index a_practice_blobdata_index on a_practice_blobdata(practiceid);
create index a_correlation_index on a_correlation(practiceid);
create index a_npv_policy_index on a_npv_policy(practiceid);
create index a_npv_risk_index on a_npv_risk(practiceid);
create index a_npv_resource_index on a_npv_resource(practiceid);
create index a_npv_edp_basic_index on a_npv_edp_basic(practiceid);
create index a_npv_edp_schedule_index on a_npv_edp_schedule(practiceid);
create index a_npv_cost_basic_index on a_npv_cost_basic(practiceid);
create index a_npv_cost_detail_index on a_npv_cost_detail(practiceid);
create index a_npv_price_index on a_npv_price(practiceid);
create index a_npv_tax_index on a_npv_tax(practiceid);
create index a_npv_summary_index on a_npv_summary(practiceid);
create index a_npv_cost_mmbs_index on a_npv_cost_mmbs(practiceid);
create index a_repository_genetic_index on a_repository_genetic(practiceid);
create index a_repository_port_index on a_repository_port(practiceid);